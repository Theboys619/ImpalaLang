{"/home/runner/Impala-Transpiled/src/in/lang.imp":{"input":"import \"stdio.imp\";\n\nnumber fact(number x) {\n  if (x == 1) {\n    return 1;\n  }\n\n  return x * fact(x - 1);\n}\n\nlog(fact(fact(2)));","ast":{"type":"Scope","block":[{"type":"CPPSnippet","value":{"type":"CPPSnippet","value":"\n#include <iostream>\n\n/* Log Function */\nvoid log(std::string msg) {\n  std::cout << msg << std::endl;\n}\nvoid log(const char* msg) {\n  std::cout << msg << std::endl;\n}\nvoid log(int msg) {\n  std::cout << msg << std::endl;\n}\nvoid log(float msg) {\n  std::cout << msg << std::endl;\n}\nvoid log(bool msg) {\n  std::string boolstr = \"false\";\n  if (msg == true) boolstr = \"true\";\n  std::cout << boolstr << std::endl;\n}\nvoid log(ImpalaNumber msg) {\n  if (msg.type == 1) {\n    std::cout << msg.a << std::endl;\n  } else {\n    std::cout << msg.b << std::endl;\n  }\n}\nvoid log(ImpalaAny msg) {\n  if (msg.type == 1) {\n    if (msg.num.type == 1)\n      std::cout << msg.num.a << std::endl;\n    else\n      std::cout << msg.num.b << std::endl;\n  } else if (msg.type == 2) {\n    std::cout << msg.str << std::endl;\n  } else {\n    std::string boolstr = \"false\";\n    if (msg.bln == true) boolstr = \"true\";\n    std::cout << boolstr << std::endl;\n  }\n}\ntemplate <typename T, typename ... Args>\nvoid log(T arg, Args... args) {\n  std::cout << arg << \" \";\n\n  log(args...);\n\n  std::cout << \"\\n\";\n}\n\n/* Input Function */\nstd::string stdcin() {\n  std::string msg;\n  std::cin >> msg;\n\n  return msg;\n}\n","index":1170,"line":0}},{"type":"Function","value":{"dataType":{"type":"Datatype","value":"number","index":0,"line":2},"varname":{"type":"Identifier","value":"fact","index":7,"line":2},"isConst":false,"parameters":[{"type":"Variable","value":{"dataType":{"type":"Datatype","value":"number","index":12,"line":2},"varname":{"type":"Identifier","value":"x","index":19,"line":2},"isConst":false}}],"scope":{"type":"Scope","block":[{"type":"If","value":{"condition":{"type":"Binary","operator":"==","left":{"type":"Identifier","value":"x","index":6,"line":3},"right":{"type":"Number","value":1,"index":11,"line":3}},"then":{"type":"Scope","block":[{"type":"Return","value":{"type":"Number","value":1,"index":11,"line":4}}]}}},{"type":"Return","value":{"type":"Binary","operator":"*","left":{"type":"Identifier","value":"x","index":9,"line":7},"right":{"type":"FunctionCall","value":{"function":{"type":"FunctionGet","value":{"type":"Identifier","value":"fact","index":13,"line":7}},"args":[{"type":"Binary","operator":"-","left":{"type":"Identifier","value":"x","index":18,"line":7},"right":{"type":"Number","value":1,"index":22,"line":7}}]}}}}]}}},{"type":"FunctionCall","value":{"function":{"type":"FunctionGet","value":{"type":"Identifier","value":"log","index":0,"line":10}},"args":[{"type":"FunctionCall","value":{"function":{"type":"FunctionGet","value":{"type":"Identifier","value":"fact","index":4,"line":10}},"args":[{"type":"FunctionCall","value":{"function":{"type":"FunctionGet","value":{"type":"Identifier","value":"fact","index":9,"line":10}},"args":[{"type":"Number","value":2,"index":14,"line":10}]}}]}}]}}]}}}